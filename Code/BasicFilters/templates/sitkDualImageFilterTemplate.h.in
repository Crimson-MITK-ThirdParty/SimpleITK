/*=========================================================================
*
*  Copyright Insight Software Consortium
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef __sitk${name}_h
#define __sitk${name}_h

$(include DoNotEditWarning.h.in)

#include <memory>

#include "sitkImageFilter.h"
#include "sitkDualMemberFunctionFactory.h"
#include "sitkBasicFilters.h"

namespace itk {
  namespace simple {

$(include ClassDeclaration.h.in)
$(include PublicDeclarations.h.in)
$(include MemberGetSetDeclarations.h.in)
$(include ClassNameAndPrint.h.in)

$(include ExecuteMethodNoParameters.h.in)$(include ExecuteMethodWithParameters.h.in)$(include CustomMethods.h.in)

    private:
      /** Setup for member function dispatching */
      typedef Image (Self::*MemberFunctionType)( $(include ImageParameters.in) );

      friend struct detail::DualExecuteInternalAddressor<MemberFunctionType>;
      template <class TImageType1, class TImageType2> Image DualExecuteInternal ( $(include ImageParameters.in) );
$(if vector_pixel_types_by_component then
OUT=[[
      friend struct detail::DualExecuteInternalVectorAddressor<MemberFunctionType>;
      template <class TImageType1, class TImageType2> Image DualExecuteInternalVector ( $(include ImageParameters.in) );]]
end)

      std::auto_ptr<detail::DualMemberFunctionFactory<MemberFunctionType> > m_DualMemberFactory;


$(include PrivateMemberDeclarations.h.in)$(include ClassEnd.h.in)


$(include FunctionalAPI.h.in)
  }
}
#endif
